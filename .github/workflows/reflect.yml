# GitHub Actions 워크플로우 - 리플렉션 실행
name: "Hybrid AI Development Workflow - Reflection"

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      force_reflection:
        description: '강제 리플렉션 실행'
        required: false
        default: 'true'
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  # 리플렉션 실행
  reflect:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install watchdog pyyaml schedule requests flask
          # Graphviz 설치 (시각화용)
          sudo apt-get update
          sudo apt-get install -y graphviz
          pip install graphviz
      
      - name: Create reports directory
        run: mkdir -p reports
      
      - name: Run reflection
        run: |
          echo "🔄 Running task reflection..."
          # reflection 패키지 경로 추가
          export PYTHONPATH="${PYTHONPATH}:$(pwd)"
          python tools/tasks_reflect.py \
            --in tasks.json \
            --out tasks.reflected.json \
            --report reports/tasks_reflect_report.md
      
      - name: Generate visualizations
        run: |
          echo "🎨 Generating visualizations..."
          # reflection 패키지 경로 추가
          export PYTHONPATH="${PYTHONPATH}:$(pwd)"
          python tools/dag_visualizer.py \
            --input tasks.reflected.json \
            --format all
      
      - name: Upload reflection artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reflection-results-${{ github.run_number }}
          path: |
            tasks.reflected.json
            reports/
            tasks_gantt.md
            tasks_flow.md
            visualization_summary.md
            *.svg
            *.png
          retention-days: 30

  # 테스트 실행
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install watchdog pyyaml pytest schedule requests flask
      
      - name: Run tests
        run: |
          echo "🧪 Running tests..."
          # reflection 패키지 경로 추가
          export PYTHONPATH="${PYTHONPATH}:$(pwd)"
          
          # 도구 테스트 실행
          if [ -f "tools/test_watchdog.py" ]; then
            python tools/test_watchdog.py
          fi
          if [ -f "tools/test_priority.py" ]; then
            python tools/test_priority.py
          fi
          if [ -f "tools/test_parallel.py" ]; then
            python tools/test_parallel.py
          fi
          if [ -f "tools/test_auto_reflect.py" ]; then
            python tools/test_auto_reflect.py
          fi

  # 린트 및 코드 품질 검사
  lint:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy schedule requests flask
      
      - name: Run Black (code formatting)
        run: black --check --diff tools/ || true
      
      - name: Run isort (import sorting)
        run: isort --check-only --diff tools/ || true
      
      - name: Run flake8 (linting)
        run: flake8 tools/ --max-line-length=100 --extend-ignore=E203,W503 || true
      
      - name: Run mypy (type checking)
        run: mypy tools/ --ignore-missing-imports || true

  # 성능 벤치마크
  benchmark:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install watchdog pyyaml psutil schedule requests flask
      
      - name: Run performance benchmarks
        run: |
          echo "⚡ Running performance benchmarks..."
          
          # reflection 패키지 경로 추가
          export PYTHONPATH="${PYTHONPATH}:$(pwd)"
          
          # 리플렉션 성능 측정
          time python tools/tasks_reflect.py \
            --in tasks.json \
            --out tasks.reflected.json \
            --report reports/benchmark_reflection.md
          
          # 시각화 성능 측정
          time python tools/dag_visualizer.py \
            --input tasks.reflected.json \
            --format mermaid
          
          # 메모리 사용량 측정
          python -c "
          import psutil
          import os
          process = psutil.Process(os.getpid())
          print(f'Memory usage: {process.memory_info().rss / 1024 / 1024:.2f} MB')
          "

  # 알림 및 보고서 생성
  notify:
    runs-on: ubuntu-latest
    needs: [reflect, test, lint, benchmark]
    if: always()
    
    steps:
      - name: Generate workflow summary
        run: |
          echo "# Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Execution Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Reflection**: ${{ needs.reflect.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Linting**: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Benchmark**: ${{ needs.benchmark.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📈 Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "Check the 'Artifacts' section for generated files." >> $GITHUB_STEP_SUMMARY