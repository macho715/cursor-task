# GitHub Actions 워크플로우 - 조건부 리플렉션 실행
# 외부 레퍼런스: https://docs.github.com/actions/reference/workflow-syntax-for-github-actions

name: "Hybrid AI Development Workflow - Reflection"

on:
  push:
    # 특정 파일/디렉토리 변경 시에만 실행
    paths:
      - 'docs/**'           # PRD 문서 변경
      - 'tasks.json'        # 태스크 정의 변경
      - '.cursor/rules/**'  # Cursor 규칙 변경
      - 'src/**'            # 소스 코드 변경
      - 'tools/**'          # 도구 변경
    # 제외할 경로
    paths-ignore:
      - 'README.md'
      - '*.log'
      - '.git/**'
      - 'node_modules/**'
      - '__pycache__/**'
      - '*.pyc'
  
  pull_request:
    # PR에서도 동일한 경로 필터 적용
    paths:
      - 'docs/**'
      - 'tasks.json'
      - '.cursor/rules/**'
      - 'src/**'
      - 'tools/**'
  
  # 수동 실행 (workflow_dispatch)
  workflow_dispatch:
    inputs:
      force_reflection:
        description: '강제 리플렉션 실행'
        required: false
        default: 'false'
        type: boolean
      skip_visualization:
        description: '시각화 건너뛰기'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # 조건부 실행 확인
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should-reflect: ${{ steps.changes.outputs.should-reflect }}
      has-docs: ${{ steps.changes.outputs.has-docs }}
      has-code: ${{ steps.changes.outputs.has-code }}
      has-tools: ${{ steps.changes.outputs.has-tools }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # 이전 커밋과 비교하기 위해
        
      - name: Detect changes
        id: changes
        run: |
          # 변경된 파일 목록 확인
          if [ "${{ github.event_name }}" = "push" ]; then
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          else
            CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          fi
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # 리플렉션이 필요한 변경사항 확인
          SHOULD_REFLECT="false"
          HAS_DOCS="false"
          HAS_CODE="false"
          HAS_TOOLS="false"
          
          if echo "$CHANGED_FILES" | grep -E '^(docs/|tasks\.json|\.cursor/rules/)'; then
            SHOULD_REFLECT="true"
            HAS_DOCS="true"
            echo "📋 Documentation or task changes detected"
          fi
          
          if echo "$CHANGED_FILES" | grep -E '^src/'; then
            HAS_CODE="true"
            echo "💻 Source code changes detected"
          fi
          
          if echo "$CHANGED_FILES" | grep -E '^tools/'; then
            HAS_TOOLS="true"
            echo "🔧 Tool changes detected"
          fi
          
          # 강제 실행 옵션 확인
          if [ "${{ github.event.inputs.force_reflection }}" = "true" ]; then
            SHOULD_REFLECT="true"
            echo "🚀 Force reflection enabled"
          fi
          
          echo "should-reflect=$SHOULD_REFLECT" >> $GITHUB_OUTPUT
          echo "has-docs=$HAS_DOCS" >> $GITHUB_OUTPUT
          echo "has-code=$HAS_CODE" >> $GITHUB_OUTPUT
          echo "has-tools=$HAS_TOOLS" >> $GITHUB_OUTPUT

  # 리플렉션 실행 (조건부)
  reflect:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should-reflect == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install watchdog pyyaml
          # Graphviz 설치 (시각화용)
          sudo apt-get update
          sudo apt-get install -y graphviz
          pip install graphviz
      
      - name: Create reports directory
        run: mkdir -p reports
      
      - name: Run reflection
        run: |
          echo "🔄 Running task reflection..."
          python tools/tasks_reflect.py \
            --in tasks.json \
            --out tasks.reflected.json \
            --report reports/tasks_reflect_report.md
      
      - name: Generate visualizations
        if: github.event.inputs.skip_visualization != 'true'
        run: |
          echo "🎨 Generating visualizations..."
          python tools/dag_visualizer.py \
            --input tasks.reflected.json \
            --format all
      
      - name: Upload reflection artifacts
        uses: actions/upload-artifact@v4
        with:
          name: reflection-results-${{ github.run_number }}
          path: |
            tasks.reflected.json
            reports/
            tasks_gantt.md
            tasks_flow.md
            visualization_summary.md
            *.svg
            *.png
          retention-days: 30

  # 테스트 실행 (코드 변경 시)
  test:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.has-code == 'true' || needs.check-changes.outputs.has-tools == 'true'
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install watchdog pyyaml pytest
      
      - name: Run tests
        run: |
          echo "🧪 Running tests..."
          # 도구 테스트 실행
          if [ -f "tools/test_watchdog.py" ]; then
            python tools/test_watchdog.py
          fi
          if [ -f "tools/test_priority.py" ]; then
            python tools/test_priority.py
          fi
          if [ -f "tools/test_parallel.py" ]; then
            python tools/test_parallel.py
          fi
          if [ -f "tools/test_auto_reflect.py" ]; then
            python tools/test_auto_reflect.py
          fi

  # 린트 및 코드 품질 검사
  lint:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.has-code == 'true' || needs.check-changes.outputs.has-tools == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy
      
      - name: Run Black (code formatting)
        run: black --check --diff tools/ || true
      
      - name: Run isort (import sorting)
        run: isort --check-only --diff tools/ || true
      
      - name: Run flake8 (linting)
        run: flake8 tools/ --max-line-length=100 --extend-ignore=E203,W503 || true
      
      - name: Run mypy (type checking)
        run: mypy tools/ --ignore-missing-imports || true

  # 성능 벤치마크 (도구 변경 시)
  benchmark:
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.has-tools == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install watchdog pyyaml psutil
      
      - name: Run performance benchmarks
        run: |
          echo "⚡ Running performance benchmarks..."
          
          # 리플렉션 성능 측정
          time python tools/tasks_reflect.py \
            --in tasks.json \
            --out tasks.reflected.json \
            --report reports/benchmark_reflection.md
          
          # 시각화 성능 측정
          time python tools/dag_visualizer.py \
            --input tasks.reflected.json \
            --format mermaid
          
          # 메모리 사용량 측정
          python -c "
          import psutil
          import os
          process = psutil.Process(os.getpid())
          print(f'Memory usage: {process.memory_info().rss / 1024 / 1024:.2f} MB')
          "

  # Conventional Commits 검증 및 릴리즈 생성
  conventional-commits:
    runs-on: ubuntu-latest
    needs: [check-changes, reflect, test, lint]
    if: always() && needs.check-changes.outputs.should-reflect == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리 필요
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml
      
      - name: Validate commit messages
        run: |
          echo "🔍 Conventional Commits 검증 중..."
          python tools/conventional_commits.py --validate
      
      - name: Generate CHANGELOG
        run: |
          echo "📝 CHANGELOG 생성 중..."
          python tools/conventional_commits.py --generate-changelog --output CHANGELOG.md
      
      - name: Check for release trigger
        id: release-check
        run: |
          # 최근 커밋들에서 feat 또는 fix가 있는지 확인
          recent_commits=$(git log --oneline -10)
          
          if echo "$recent_commits" | grep -E "^[a-f0-9]+ feat\(|^[a-f0-9]+ fix\("; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "🚀 릴리즈 트리거 감지됨"
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "ℹ️ 릴리즈 트리거 없음"
          fi
      
      - name: Create release
        if: steps.release-check.outputs.should_release == 'true'
        run: |
          echo "🚀 릴리즈 생성 중..."
          python tools/conventional_commits.py --create-release --draft
      
      - name: Upload CHANGELOG
        uses: actions/upload-artifact@v4
        with:
          name: changelog-${{ github.run_number }}
          path: CHANGELOG.md
          retention-days: 30

  # 알림 및 보고서 생성
  notify:
    runs-on: ubuntu-latest
    needs: [check-changes, reflect, test, lint, conventional-commits]
    if: always()
    
    steps:
      - name: Generate workflow summary
        run: |
          echo "# Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Execution Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Reflection**: ${{ needs.reflect.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tests**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Linting**: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Conventional Commits**: ${{ needs.conventional-commits.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔍 Change Detection" >> $GITHUB_STEP_SUMMARY
          echo "- **Documentation**: ${{ needs.check-changes.outputs.has-docs }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Code**: ${{ needs.check-changes.outputs.has-code }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tools**: ${{ needs.check-changes.outputs.has-tools }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📈 Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "Check the 'Artifacts' section for generated files." >> $GITHUB_STEP_SUMMARY
      
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('🔄 Reflection Results')
            );
            
            const reflectionResult = '${{ needs.reflect.result }}';
            const testResult = '${{ needs.test.result }}';
            const lintResult = '${{ needs.lint.result }}';
            
            const statusEmoji = {
              'success': '✅',
              'failure': '❌',
              'cancelled': '⚠️',
              'skipped': '⏭️'
            };
            
            const commentBody = `## 🔄 Reflection Results
            
            | Job | Status | Result |
            |-----|--------|--------|
            | Reflection | ${statusEmoji[reflectionResult] || '❓'} | ${{ needs.reflect.result }} |
            | Tests | ${statusEmoji[testResult] || '❓'} | ${{ needs.test.result }} |
            | Linting | ${statusEmoji[lintResult] || '❓'} | ${{ needs.lint.result }} |
            
            **Change Detection:**
            - Documentation: ${{ needs.check-changes.outputs.has-docs }}
            - Code: ${{ needs.check-changes.outputs.has-code }}
            - Tools: ${{ needs.check-changes.outputs.has-tools }}
            
            Check the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) for detailed logs.`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
