# 커스텀 프로젝트용 Conventional Commits 설정

# 허용된 커밋 타입 (프로젝트 특화)
allowed_types:
  feat: "새로운 기능"
  fix: "버그 수정"
  docs: "문서 변경"
  style: "코드 스타일 변경"
  refactor: "리팩토링"
  perf: "성능 개선"
  test: "테스트 추가/수정"
  build: "빌드 시스템 변경"
  ci: "CI/CD 설정 변경"
  chore: "기타 작업"
  revert: "이전 커밋 되돌리기"
  # 프로젝트 특화 타입
  api: "API 변경"
  ui: "사용자 인터페이스 변경"
  db: "데이터베이스 변경"
  auth: "인증/권한 변경"
  security: "보안 관련 변경"

# 중요도별 분류
importance_levels:
  feat: 3
  fix: 3
  security: 4                    # 보안 최고 우선순위
  api: 3
  auth: 3
  perf: 2
  refactor: 2
  ui: 2
  db: 2
  docs: 1
  style: 1
  test: 1
  build: 1
  ci: 1
  chore: 1
  revert: 2

# 프로젝트별 스코프
project_scopes:
  # 프론트엔드
  frontend: "프론트엔드 관련"
  ui: "사용자 인터페이스"
  components: "React 컴포넌트"
  pages: "페이지 컴포넌트"
  styles: "스타일링"
  
  # 백엔드
  backend: "백엔드 관련"
  api: "API 엔드포인트"
  database: "데이터베이스"
  auth: "인증 시스템"
  middleware: "미들웨어"
  
  # DevOps
  deploy: "배포 관련"
  docker: "Docker 설정"
  k8s: "Kubernetes"
  monitoring: "모니터링"
  
  # 팀별
  mobile: "모바일 앱"
  desktop: "데스크톱 앱"
  web: "웹 애플리케이션"

# 버전 증가 규칙 (프로젝트 특화)
version_bumps:
  major: ["feat", "fix", "api", "auth", "security"]  # BREAKING CHANGE 포함 시
  minor: ["feat", "api", "ui", "auth"]              # 새로운 기능
  patch: ["fix", "perf", "refactor", "docs", "style", "test", "build", "ci", "chore", "db"]

# 커밋 메시지 규칙
commit_rules:
  header_max_length: 100
  header_min_length: 10
  body_max_length: 1000
  breaking_change_types: ["feat", "fix", "api", "auth", "security"]
  
  # 필수 스코프 (프로젝트 규칙)
  required_scopes: []
  
  # 금지된 스코프
  forbidden_scopes: ["temp", "wip", "test"]

# CHANGELOG 생성 설정
changelog:
  sections:
    - "BREAKING CHANGES"
    - "security"                 # 보안 우선
    - "feat"
    - "fix"
    - "api"
    - "auth"
    - "ui"
    - "perf"
    - "refactor"
    - "db"
    - "docs"
    - "style"
    - "test"
    - "build"
    - "ci"
    - "chore"
  
  section_titles:
    BREAKING_CHANGES: "🚨 BREAKING CHANGES"
    security: "🔒 Security"
    feat: "✨ 새로운 기능"
    fix: "🐛 버그 수정"
    api: "🔌 API 변경"
    auth: "🔐 인증/권한"
    ui: "🎨 UI/UX"
    perf: "⚡ 성능 개선"
    refactor: "♻️ 리팩토링"
    db: "🗄️ 데이터베이스"
    docs: "📚 문서"
    style: "💄 스타일"
    test: "✅ 테스트"
    build: "🔨 빌드"
    ci: "👷 CI/CD"
    chore: "🔧 기타"
  
  include_stats: true
  date_format: "%Y-%m-%d"

# 릴리즈 설정
release:
  default_version: "0.1.0"
  tag_prefix: "v"
  title_format: "Release {version}"
  message_format: "Release version {version}"
  
  github:
    draft: false
    prerelease: false
    latest: true

# 자동화 설정
automation:
  git_hooks:
    commit_msg_validation: true
    pre_commit_checks: true
  
  ci_cd:
    github_actions: true
    auto_release: false
    auto_release_notes: true
  
  notifications:
    slack: true
    slack_webhook: "https://hooks.slack.com/services/YOUR/WEBHOOK/URL"
    email: true
    email_recipients: ["team@company.com"]

# 프로젝트별 설정
project:
  name: "Custom Project"
  description: "커스텀 프로젝트"
  repository:
    owner: "your-org"
    name: "your-repo"
    url: "https://github.com/your-org/your-repo"
  license: "MIT"
  maintainer: "your-team"

# 팀별 설정
team:
  # 팀 규모
  size: "medium"  # small, medium, large
  
  # 개발 경험 수준
  experience_level: "intermediate"  # junior, intermediate, senior
  
  # 작업 시간대
  working_hours: "9-18"
  timezone: "Asia/Seoul"
  
  # 협업 도구
  collaboration_tools:
    - "Slack"
    - "GitHub"
    - "Jira"
    - "Confluence"

# 고급 설정
advanced:
  auto_detect_scope: true
  filter_duplicates: true
  group_commits: true
  sort_by_importance: true
  use_emojis: true
  
  # 다국어 지원
  i18n:
    enabled: true
    default_language: "ko"
    supported_languages: ["ko", "en"]
  
  # 커밋 템플릿
  commit_template: |
    type(scope): description
    
    [optional body]
    
    [optional footer(s)]
  
  # 릴리즈 노트 템플릿
  release_notes_template: |
    ## What's Changed
    
    {changelog}
    
    ## Contributors
    
    {contributors}
    
    **Full Changelog**: {full_changelog_url}
